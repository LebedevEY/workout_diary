import { Bot, Context, GrammyError, HttpError } from 'grammy';
import { WorkoutDatabase } from '../db/database.js';
import { startCommand } from '../commands/start.js';
import { helpCommand } from '../commands/help.js';
import { 
  addCommand, 
  handleExerciseSelection, 
  handleWorkoutInput, 
  isAwaitingInput 
} from '../commands/add.js';
import {
  addSetCommand,
  handleAddSetSelection,
  handleAddSetInput,
  isAwaitingAddSetInput
} from '../commands/addSet.js';
import { 
  historyCommand, 
  handleHistorySelection, 
  handleDateInput, 
  isAwaitingHistoryInput 
} from '../commands/history.js';
import {
  createExerciseCommand,
  handleCreateExerciseInput,
  isAwaitingCreateExerciseInput
} from '../commands/createExercise.js';

export class WorkoutBot {
  private bot: Bot;
  private db: WorkoutDatabase;

  constructor(token: string, dbPath?: string) {
    this.bot = new Bot(token);
    this.db = new WorkoutDatabase(dbPath);
    this.setupHandlers();
    this.setupErrorHandling();
  }

  private setupHandlers(): void {
    this.bot.command('start', (ctx) => startCommand(ctx, this.db));
    this.bot.command('add', (ctx) => addCommand(ctx, this.db));
    this.bot.command('addset', (ctx) => addSetCommand(ctx, this.db));
    this.bot.command('history', (ctx) => historyCommand(ctx, this.db));
    this.bot.command('create', (ctx) => createExerciseCommand(ctx, this.db));
    this.bot.command('help', helpCommand);

    this.bot.on('callback_query:data', async (ctx) => {
      const data = ctx.callbackQuery.data;
      
      if (data.startsWith('exercise_')) {
        await handleExerciseSelection(ctx, this.db);
      } else if (data.startsWith('addset_')) {
        await handleAddSetSelection(ctx, this.db);
      } else if (data.startsWith('history_')) {
        await handleHistorySelection(ctx, this.db);
      }
    });

    this.bot.on('message:text', async (ctx) => {
      if (!ctx.from) return;

      const text = ctx.message.text;

      if (text === 'üìù –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ') {
        await addCommand(ctx, this.db);
        return;
      }
      
      if (text === 'üîÑ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥') {
        await addSetCommand(ctx, this.db);
        return;
      }
      
      if (text === 'üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫') {
        await historyCommand(ctx, this.db);
        return;
      }
      
      if (text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
        await helpCommand(ctx);
        return;
      }

      if (isAwaitingInput(ctx.from.id)) {
        await handleWorkoutInput(ctx, this.db);
      } else if (isAwaitingAddSetInput(ctx.from.id)) {
        await handleAddSetInput(ctx, this.db);
      } else if (isAwaitingHistoryInput(ctx.from.id)) {
        await handleDateInput(ctx, this.db);
      } else if (isAwaitingCreateExerciseInput(ctx.from.id)) {
        await handleCreateExerciseInput(ctx, this.db);
      } else {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n/add - –¥–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ\n/addset - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥\n/history - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n/create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ\n/help - –ø–æ–º–æ—â—å');
      }
    });
  }

  private setupErrorHandling(): void {
    this.bot.catch((err) => {
      const ctx = err.ctx;
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
      const e = err.error;
      
      if (e instanceof GrammyError) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:', e.description);
      } else if (e instanceof HttpError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:', e);
      } else {
        console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', e);
      }
    });
  }

  async start(): Promise<void> {
    await this.setupBotCommands();
    console.log('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    await this.bot.start();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  }

  private async setupBotCommands(): Promise<void> {
    await this.bot.api.setMyCommands([
      { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: 'add', description: '–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ' },
      { command: 'addset', description: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é' },
      { command: 'history', description: '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫' },
      { command: 'create', description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ' },
      { command: 'help', description: '–ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' }
    ]);
  }

  async stop(): Promise<void> {
    console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    await this.bot.stop();
    this.db.close();
  }
}
